{"version":3,"sources":["components/TodoItem/TodoItem.js","App.js","index.js"],"names":["TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkItem","checked","state","setState","onCheck","task","id","react_default","a","createElement","className","onClick","role","aria-label","title","onDelete","bind","React","Component","App","userInput","todoIndex","todoList","handleDelete","assertThisInitialized","handleCheck","storage","JSON","parse","localStorage","getItem","isNull","event","target","value","_this2","concat","toConsumableArray","saveData","preventDefault","_this3","map","item","components_TodoItem_TodoItem","key","_this4","array","index","findIndex","i","_this5","splice","data","setItem","stringify","listTodo","addTodo","type","placeholder","onChange","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c0956d4e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass TodoItem extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            checked: this.props.task.checked    // Reprend l'√©tat check re√ßu en props\r\n        }\r\n    }\r\n\r\n    checkItem = () => {\r\n        let checked = ''                        // Cr√©ation d'une variable check √† part\r\n        if (!this.state.checked){               // Changement de l'√©tat check\r\n            this.setState({checked: true})\r\n            checked = true\r\n        } else {\r\n            this.setState({checked: false})\r\n            checked = false\r\n        }\r\n\r\n        this.props.onCheck(this.props.task.id, checked) // Change l'√©tat check dans la variable props\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='todo-item'>\r\n              {/*                         Appelle la fonction pour changer l'√©tat                       Affiche soit la case verte ou rouge selon l'√©tat */}\r\n                <button className='check' onClick={this.checkItem}><span role=\"img\" aria-label=\"check\">{this.state.checked ? \"‚úÖ\" : \"üü•\"}</span></button> { this.props.task.title }\r\n              {/*                               Appelle l'√©v√©nement sur app.js avec l'ID en tant qu'argument */}\r\n                <button className='todo-remove' onClick={this.props.onDelete.bind(this, this.props.task.id)}><span role=\"img\" aria-label=\"remove\">‚ùå</span></button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem","///////////////////////////////////////////\n//                                       //\n//  Todolist par Fr√©d√©rick Van Isschot   //\n//  https://github.com/Fred-Vaniss       //\n//                                       //\n///////////////////////////////////////////\n\nimport React from 'react';\nimport { TodoItem } from './components'\nimport { isNull } from 'util';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userInput: '',  // Champ de texte\n      todoIndex: 0,   // Indexe de nouvelles entr√©es\n      todoList: []    // Liste des t√¢ches\n    }\n    this.handleDelete = this.handleDelete.bind(this)  // Bind des √©v√©nements vers les components\n    this.handleCheck = this.handleCheck.bind(this)    \n  }\n\n  // V√©rification si il y a des donn√©es en cache, chargement de ceux-ci si elles existent\n  componentWillMount () {\n    const storage = JSON.parse(localStorage.getItem('todolist'))\n    if (!isNull(storage)){\n      this.setState({\n        todoIndex: storage.todoIndex,\n        todoList: storage.todoList\n      })\n    }\n  }\n\n  // Ev√©nement lorsqu'on tape dans le champ de texte\n  onChange(event){\n    this.setState({\n      userInput: event.target.value // On change l'√©tat de la variable\n    })\n  }\n\n  // Ev√©nement lorsq'un valide l'ajout d'un √©v√©nement\n  addTodo(event){\n    if (this.state.userInput !== ''){\n      // On modifie l'√©tat de la classe\n      this.setState({\n        userInput: '',                          // On vide le champ de texte\n        todoIndex: this.state.todoIndex + 1,    // On incr√©mente le compteur d'indexe\n        // On ajoute un nouvel objet au tableau de la liste des t√¢ches avec l'ID, le texte entr√©e et la valeur \"checked\" en false par d√©faut\n        todoList: [...this.state.todoList, {id: this.state.todoIndex, title: this.state.userInput, checked: false}]\n      }, () => this.saveData(this.state))\n      event.preventDefault()    // On emp√™che la page de se recharger a cause du formulaire\n    } else {\n      event.preventDefault()\n    }\n  }\n\n  // Fonction qui va lire la liste et les afficher sur la page avec un map\n  listTodo(){\n    return this.state.todoList.map((item) => {\n      return(\n        <TodoItem key={item.id} onCheck={this.handleCheck} onDelete={this.handleDelete} task={ item }/>\n        // onCheck et onDelete: va pouvoir communiquer l'√©v√©lement depuis le component en envoyant par les props\n      )\n    })\n  }\n\n  // Gestion de l'√©v√©nement lorsqu'on coche la case depuis le component\n  handleCheck(id, state){\n    let array = this.state.todoList                   // On stocke le tableau de la liste des t√¢che dans une variable\n    const index = array.findIndex(i => i.id === id)   // On cherche dans quel index se trouve notre ID concern√©e\n\n    array[index].checked = state                      // On applique le changement de variable dans notre tableau\n\n    this.setState({ \n      todoList: array                                 // On applique les changement faites au tableau dans la state\n    }, () => this.saveData(this.state))               // On sauvegarde les changements aux donn√©es locale\n  }\n  \n  // Gestion de l'√©v√©nement lorsqu'on supprime une t√¢che\n  handleDelete(id){\n    let array = this.state.todoList                   // On stocke le tableau de la liste des t√¢che dans une variable\n    const index = array.findIndex(i => i.id === id)   // On cherche dans quel index se trouve notre ID concern√©e\n\n    array.splice(index, 1)                            // On supprime l'√©l√©ment du tableau concern√©\n\n    this.setState({\n      todoList: array                                 // On applique les changement faites au tableau dans la state\n    }, () => this.saveData(this.state))               // On sauvegarde les changements aux donn√©es locale\n\n    \n  }\n\n  // Fonction pour sauvegarder les donn√©es localement\n  saveData(data){\n    localStorage.setItem('todolist', JSON.stringify(data))\n  }\n\n  // Rendu de l'application\n  render(){\n    return (\n      <div className=\"wrapper\">\n        <h1>Todo list</h1>\n        \n        <div className=\"todo-list\">\n          {this.listTodo()} {/* Appelle la fonction qui liste la liste des t√¢che dans la page*/}\n          <form className=\"todo-item\">\n            <button onClick={this.addTodo.bind(this)}><span role=\"img\" aria-label=\"add\">‚ûï</span></button>\n            <input \n              value={this.state.userInput}          // Reprend la valeur de l'√©tat userInput\n              type='text' \n              placeholder='Ajouter une t√¢che'\n              onChange={this.onChange.bind(this)}   // Communique avec l'√©v√©nement onChange qui change l'√©tat userInput\n              className=\"todo-input\"\n            />\n          \n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}